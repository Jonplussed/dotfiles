" must be set first; prevents maintaining compatibility with Vi
set nocompatible



" HELPER FUNCTIONS ============================================================

" toggle between light/dark backgrounds
function! ToggleBackground()
  if &background == "light"
    set background=dark
  else
    set background=light
  endif
endfunction

" source a file if it exists
function! SourceIfExists(filename)
  if filereadable(a:filename)
    execute 'source ' . a:filename
  endif
endfunction



" PLUGINS =====================================================================

call plug#begin('~/.vim/plugged')
call SourceIfExists($HOME . '/.vundle')
call SourceIfExists($HOME . '/.vundle.local')
call plug#end()



" INPUT =======================================================================

" make Vim more compatible with other filesystems
au BufWritePre set nobomb " don't set byte-order-mark on files
set encoding=utf-8 " all opened files should be UTF-8

" make Vim behave more like other editors
set backspace=indent,eol,start " enable backspacing through whitespace
set virtualedit=all " cursor can move past the end of the line
set mouse=a " enable mouse reporting/highlighting/scrolling

" use the system clipboard as the default register
set clipboard=unnamedplus,unnamed

" change the default tabs to two spaces
set expandtab " use soft-tabs
set softtabstop=2 " default twp-space soft tabs
set shiftwidth=2 " auto-indent with 2 spaces



" NAVIGATION ==================================================================

" a leader key convenient in any keyboard layout
let mapleader=' '

" shortcuts for working with the quickview window
map <leader>cn :cnext<CR> " next item in quickview
map <leader>cp :cprevious<CR> " previous item in quickview
map <leader>co :copen<CR> " open quickview

" navigate split windows via ctrl-h/j/k/l
nnoremap <C-J> <C-W>j
nnoremap <C-K> <C-W>k
nnoremap <C-H> <C-W>h
nnoremap <C-L> <C-W>l

" generate ctags from within Vim
command Ctags !ctags -R

map <leader>gg :Ggrep<C-R><CR>



" VISUALS =====================================================================

syntax on           " enable syntax highlighting
set number          " show line number on left side
set ruler           " show column/line # on bottom-right
set nowrap          " don't wrap lines
set laststatus=2    " show statusline at the bottom
set showcmd         " show partial command input on bottom-right
set relativenumber  " default to relative line numbering

" show invisible charactes
set list
set listchars=trail:#,extends:»,precedes:«

" modify cursor depending on mode
let &t_SI = "\<Esc>]50;CursorShape=1\x7"
let &t_EI = "\<Esc>]50;CursorShape=0\x7"

" shortcuts for common visual changes
map <leader>w :set wrap!<CR>               " toggle line wrapping
map <leader>r :set relativenumber!<CR>     " toggle relative/normal line numbers
map <leader>b :call ToggleBackground()<CR> " toggle between light/dark backgrounds

" best color scheme ever
colorscheme solarized
set background=dark   " default to dark mode

" highlight the line and column under the cursor
set cursorline cursorcolumn
au WinLeave * set nocursorline nocursorcolumn
au BufCreate,WinEnter * set cursorline cursorcolumn

" because we have standards
set colorcolumn=80
set textwidth=79

" set default theme
if $TERM_THEME == 'light'
  set background=light
else
  set background=dark
endif



" FILETYPES ===================================================================

au BufNewFile,BufRead *.go set filetype=go
au BufNewFile,BufRead *.md,*.markdown set filetype=markdown
au BufNewFile,BufRead *.gemspec,[gG]uardfile,[gG]emfile,[cC]apfile,[rR]akefile,*.ru set filetype=ruby
au BufNewFile,BufRead *.slim set filetype=slim
au BufNewFile,BufRead *.psql set filetype=sql
au BufNewFile,BufRead *.vundle,*.vundle.local set filetype=vim



" SEARCH ======================================================================

set hlsearch   " highlight search results
set incsearch  " enable incremental searching
set ignorecase " searches are case insensitive...
set smartcase  " unless they contain a capital letter

" center the screen on search results
nnoremap n  nzz
nnoremap N  Nzz
nnoremap *  *zz
nnoremap #  #zz
nnoremap g* g*zz
nnoremap g# g#zz



" FILE BROWSING ===============================================================

" NERDTree-specific settings
map <leader>nt :NERDTreeToggle<CR> " open/close NERDtree
map <leader>nf :NERDTreeFind<CR>   " open at the current file

let g:NERDTreeWinSize=25   " constrain the default width
let g:NERDTreeShowHidden=1 " show hidden files

" don't display compiled or otherwise useless files
let g:NERDTreeIgnore = ['\.pyc$', '\.pyo$', '\.rbc$', '\.rbo$', '\.class$', '\.hi$', '\.o$', '\~$']

" hide certain files from Ctrl-P
set wildignore+=*/tmp/*,*.so,*.swp,*.zip              " standard system files
set wildignore+=*/node_modules/*,*/bower_components/* " 3rd-party javascript packages
set wildignore+=*/vendor/*                            " 3rd-party Rails gems
set wildignore+=*/dist/*                              " compiled Haskell and PureScript files



" HASKELL =====================================================================

" preset literate Haskell files using Haddock syntax
au FileType lhaskell let b:presenting_slide_separator = '\v(^|\n)\ze\= +'
au FileType haskell setlocal indentexpr=

" common Intero commands
map <leader>io :InteroOpen<CR>            " open GHCi REPL
map <leader>it :InteroGenericType<CR>     " get type info under cursor
map <leader>il :InteroLoadCurrentFile<CR> " load current module into GHCi
map <leader>ir :InteroReload<CR>          " reload current module in GHCi
map <leader>ig :InteroGoToDef<CR>         " goto function definition



" MAKEFILE ====================================================================

" Make syntax requires hard tabs
au Filetype make setlocal noexpandtab
au Filetype make setlocal tabstop=2



" JAVA ========================================================================

" What's more Java than absurdly wide lines?
au FileType java setlocal softtabstop=2
au FileType java setlocal shiftwidth=2



" MARKDOWN ====================================================================

au FileType markdown setlocal spell spelllang=en_us



" PRESENTATIONS ===============================================================

function! s:PresentingEdit()
  setlocal colorcolumn=60
  setlocal textwidth=59
endfunction

function! s:PresentingStart()
  StartPresenting
  set noruler
  set noshowmode
  set noshowcmd
  set laststatus=0
  set showtabline=0
  call s:PresentingEdit()
endfunction

command! PresentingStart call s:PresentingStart()
command! PresentingEdit call s:PresentingEdit()



" PYTHON ======================================================================

au FileType python setlocal softtabstop=2
au FileType python setlocal shiftwidth=2



" COBOL =======================================================================

au FileType cobol setlocal colorcolumn=7,11,+1
au FileType cobol setlocal softtabstop=4
au FileType cobol setlocal shiftwidth=4



" LOCAL OVERRIDE ==============================================================

" source a local override if it exists
call SourceIfExists($HOME . '/.vimrc.local')
