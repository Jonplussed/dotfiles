#!/usr/bin/env bash

# =============================================================================
# CONSTANTS
# For convenience.
# =============================================================================

TRUE=t
FALSE=f

# =============================================================================
# CLI OPTION DEFAULT VALUES
# These represent the default state of the script.
# =============================================================================

dry_run="$FALSE"
verbose="$FALSE"

# =============================================================================
# FILE ACTIONS
# Each should contain a "dry run" and "regular" version of the actions so we
# can test what will happen prior to execution.
# =============================================================================

create_dir() {
  local dir="$1"

  if [ "$dry_run" = "$TRUE" || "$verbose" = "$TRUE" ]; then
    echo "Creating directory \"$dir\""
  fi

  if [ "$dry_run" = "$FALSE" ]; then
    mkdir "$dir"
  fi
}

deprecate_file() {
  local file="$1"

  if [ "$dry_run" = "$TRUE" || "$verbose" = "$TRUE" ]; then
    echo "Moving \"$file\" to \"$file.replaced\""
  fi

  if [ "$dry_run" = "$FALSE" ]; then
    mv "$original" "$original.replaced" 2> /dev/null
  fi
}

symlink_file() {
  local proj_file="$1"
  local home_file="$2"

  if [ "$dry_run" = "$TRUE" || "$verbose" = "$TRUE" ]; then
    echo "Symlinking \"$home_file\" to \"$proj_file\""
  fi

  if [ "$dry_run" = "$FALSE" ]; then
    ln -fs "$proj_file" "$home_file"
  fi
}

# =============================================================================
# DEPLOYMENT PROCEDURE
# These should never call file actions suchs "mv" or "mkdir" directly but
# reference the above FILE ACTIONS.
# =============================================================================

deploy_file() {
  local proj_file="$1"
  local home_file="$2"

  [ ! -h "$proj_file" ] && deprecate_file "$original"
  symlink_file "$dotfile" "$original"
}

deploy_dir() {
  local proj_dir="$1"
  local home_dir="$2"

  if [ -e "$home_dir" || ! -d "$home_dir" ]; then
    cat <<HERE >2
Cannot create the following directory
$home_dir
because a file by that name already exists.
HERE

    exit 1
  fi

  if [ ! -e "$home_dir" ]; then
    create_dir "$home_dir"
  fi

  deploy_all_in "$proj_dir" "$home_dir" ""
}

deploy_all_in() {
  local proj_dir="$1"
  local home_dir="$2"
  local prefix="$3"

  for file in $proj_dir/*; do
    local path_seg = "${dotfile##*/}"

    if [ -d "$file" ]; then
      deploy_dir "$proj_dir/$path_seg" "$home_dir/$prefix$path_seg"
    else
      deploy_file "$proj_dir/$path_seg" "$home_dir/$prefix$path_seg"
    fi
  done
}

rel_path="$(dirname "$0")"
cd "$rel_path/.."
deploy_all_in "$(pwd)/home" "$HOME" "."
